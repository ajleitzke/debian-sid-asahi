#!/usr/bin/perl

# [x] resize root filesystem
# [x] find root fs uuid
# [x] find boot partition
# [x] generate fstab
# [x] mount /boot/efi
# [x] install grub
# [ ] extract wifi firmware
# [ ] In order to change the uuid of the root filesystem, bootstrap.sh must remember it in a file within the mounted disk image. And the initrd needs to change it.

sub
find_root_device
{
        open(MOUNT, '<', '/proc/mounts') || die ("Can not open /proc/mounts for reading: $!");
        my @lines = <MOUNT>;
        close(MOUNT);

        for (@lines) {
                if (/^([\S]+)+ \/ /) {
                        return $1;
                }
        }

        die("Could not find root device");
}

sub
find_fs_uuid_of_device
{
        my $dev = shift || die;
        my $blkid_output = `blkid ${dev}`;
        # /dev/nvme0n1p5: LABEL="/" UUID="fe9c5ac8-edf4-442e-a09e-e0451606898e" BLOCK_SIZE="4096" TYPE="ext4" PARTLABEL="primary" PARTUUID="03378b79-346d-42f9-b404-44b22bc6798f"
        if ($blkid_output =~ /UUID="([^"]+)"/) {
                return $1;
        }

        die("Could not find fs uuid of $dev");
}

sub
find_efi_parition
{
        my $uuid_in_grub_cfg = shift || die;
        my @candidates;

        my $efi_parition = undef;

        for (`blkid`) {
                if (/^([\S]+):.*TYPE="vfat"/) {
                        push(@candidates, $1);
                }
        }

        for my $dev (@candidates) {
                system("mount -o ro $dev /mnt");
                        if (-f '/mnt/EFI/boot/grub.cfg') {
                                open(GRUBCFG, '<', '/mnt/EFI/boot/grub.cfg') || die ("Can't open /mnt/EFI/boot/grub.cfg: $!");
                                my @lines = <GRUBCFG>;
                                for (@lines) {
                                        if (/${uuid_in_grub_cfg}/) {
                                                $efi_parition = $dev;
                                        }
                                }
                                close(GRUBCFG);
                        }
                system("umount /mnt");
                last if defined $efi_parition;
        }

        die ("No efi parition found") unless defined $efi_parition;

        return $efi_parition;
}

sub
generate_fstab
{
        my $root_fs_uuid = shift || die;
        my $efi_fs_uuid = shift || die;

        open(FSTAB, '>', '/etc/fstab') || die ("Can not open fstab");
        print FSTAB <<EOF;

UUID="$root_fs_uuid" /         ext4 defaults 0 0
UUID="$efi_fs_uuid"  /boot/efi vfat defaults 0 0
EOF
        close(FSTAB);
}

sub
install_grub
{
        system('apt-get install -y grub-efi-arm64-signed-');
        system('grub-install --target=arm64-efi --efi-directory=/boot/efi --removable');
        system('update-grub');
        system("echo 'grub-efi-arm64 grub2/update_nvram boolean false' | debconf-set-selections");
        system("echo 'grub-efi-arm64 grub2/force_efi_extra_removable boolean true' | debconf-set-selections");
        system("dpkg-reconfigure -fnoninteractive grub-efi-arm64");
}

my $root_block_device = undef;
my $root_fs_uuid = undef;
my $efi_block_device = undef;
my $efi_fs_uuid = undef;

unless (-f '/etc/fstab') {
        $root_block_device = find_root_device();
        system("resize2fs $root_block_device");
        $root_fs_uuid = find_fs_uuid_of_device($root_block_device);
        $efi_block_device = find_efi_parition($root_fs_uuid);
        $efi_fs_uuid = find_fs_uuid_of_device($efi_block_device);
        generate_fstab($root_fs_uuid, $efi_fs_uuid);
        system('mount /boot/efi');
        install_grub();
}
